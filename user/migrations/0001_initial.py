# Generated by Django 2.2.5 on 2019-10-09 06:21

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'そのユーザー名はすでに使用されています'}, help_text='ユーザー名は英数字150以内で入力してください。', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('profile_icon', models.ImageField(blank=True, null=True, upload_to='profile_icons', verbose_name='profile icon')),
                ('self_introduction', models.CharField(blank=True, max_length=512, verbose_name='self introduction')),
                ('is_admin', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False, help_text='管理者権限を指定します。', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='管理者がこのユーザーをログインできるかを管理します。アカウントを削除する際には、こちらをFlaseにします。', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
